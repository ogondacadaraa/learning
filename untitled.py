# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Do15GryIOHMXNRjNQn1804GmpezGj_Y_
"""

#giorgi tsiklauri, 2 chapter, 11 march
import math
import scipy.constants as pc
import numpy as np
a = 4 #basic variable definition
A = 6 #this shows that language is case sensitive
c=a+A

'{0:7.4f}'.format(math.pi) #this formats (rounds) pi down to 4 digits
'{0:12.4e}'.format(pc.h) #gives us rounded plancs constant
x = np.array( [ 12.2, 10.9, 13.6, 8.4, 11.1 ]) #gives us 1 dimensional array
B = np.array( [ [ 2, 4 ],[ 1, 3 ] ] ) #this defines 2 dimensional array
M = np.matrix(' 2 4 ; 11 3 ') #this defines 2x2 matrix
print(M[1,0]) #this gives us (indexes) 2nd row first element of matrix
print(c)
Z = np.zeros((5,3)) #gives us t row 3 column array filled with 0s
O = np.ones((2,3)) #gives us array filled with 1
I = np.eye(3,3) #gives us array kind like identity matrix
M[0,:] #gives whole row of matrix
M[:,1]  #gives whole column of matrix
M[0,0:2]  # gives us first row, first 2 elements
x1=0
x2=2
dx=0.5
np.arange(x1,x2,dx) #starts from x1 and increments with steps of dx up to x2

d = np.linspace(1,100,8) #  gives us 8 equal intervalls from 1 to 100
np.logspace(1,6,6,base=2.0) #gives us 6 equal intervals in logspace

f = 'Alison'
s = 'Krauss'  #defines string
s[2] #givs us 3rd lettter of string a

f+s #adds strings together

E = [ 1, 2, 3, 4, 5 \
, 6, 7, 8 ]  #splits a python line in 2

LincGetty = 'Four score and seven years ago, ' \
'our fathers brought forth, upon this continent, ' \
'a new nation .' #splits into substrings
len('How long is this string?') #len function gives us string length
str(3.14159) #converts numbers to stings

float('3.14159') # converts string to float

s = 'my string'
s.startswith('my') #checks if string starts with given phrase

'abcde'.upper() #converts strings into uppercase

np.pi * 0.5**2 / 4 #computes the area of a circle of diameter 0.5 **is exponential

x = 3 ; y = 2 ; z = 1.5
-x ** y #takes x to the y power
( -x ) ** y #takes -x to y power

a = 2 + 4j
b = 0.5 - 0.3j #we can define complex numbers

c = np.matrix(' 1 2 3 4 5 ')
d = np.matrix(' 2 ; 4 ; 6 ; 8 ; 10 ')
c*d #we can multiply matricies together (inner product)
d*c #gives out outer product

a = np.matrix(' 1 2 3 ')
b = np.matrix(' 4 ; 5 ; 6 ')
A=np.matrix([[1, 2, 3],
[4, 5, 6],
[7, 8, 9]])
A*A
a.dot(b) #gives us dot product

a = np.array([ 1, 2, 3 ])
b = np.array([ 4, 5, 6 ])
np.cross(a,b) #gives us cross product of aXb
abs(-2.45) #gives modulus
round(-7.6) #rounds down
x = 14 ; y = 22
max(x,y) #finds max

a = np.array([2, 7, 3, -4, 3.5])
min(a) #gives min
math.log10(100) #gives log
math.exp(math.log(1)) #This function calculates the exponential
#of the value inside the parentheses.

import math
def bungee(t):
  g = 9.81 ; m = 68.1 ; cd = 0.25
  v = math.sqrt(m*g/cd)*math.tanh(math.sqrt(cd*g/m)*t)
  return v
bungee(10)

import numpy as np
tm = np.linspace(0,20,11)
tm
tmm = np.matrix(tm)
tmmt = tmm.transpose() #transposes matrix
tmmt
import pylab
pylab.plot(tmmt,v) #plots
import math
import numpy as np
import pylab
g = 9.81 ; m = 68.1 ; cd = 0.25
tm = np.linspace(0,20,11)
v = math.sqrt(m*g/cd)*np.tanh(math.sqrt(cd*g/m)*tm)
pylab.plot(tm,v)
pylab.title('Velocity of Bungee Jumper versus Time')
pylab.xlabel('Time in seconds')
pylab.ylabel('Velocity in m/s')
pylab.grid() #we can customize the graph
pylab.scatter(tm,v) #givves points
pylab.plot(tm,v,marker='o') #adds marks

pylab.plot(tm,v,ls='--',c='k',marker='D') #gives dashes

g = 9.81 ; m = 68.1 ; cd = 0.25
v = math.sqrt(m*g/cd)*np.tanh(math.sqrt(cd*g/m)*tm)
v

import math
import numpy as np
import pylab
g = 9.81 ; m =68.1 ; cd = 0.25
tm = np.linspace(0,20,11)
v = math.sqrt(m*g/cd)*np.tanh(math.sqrt(cd*g/m)*tm)
cd = 0.30
v1 = math.sqrt(m*g/cd)*np.tanh(math.sqrt(cd*g/m)*tm)
pylab.plot(tm,v,ls ='-',c='k',marker='D',label='cd=0.25')
pylab.plot(tm,v1,ls ='--',c='k',marker='o',label='cd=0.30')
pylab.title('Velocity of Bungee Jumper versus Time')
pylab.xlabel('Time in seconds')
pylab.ylabel('Velocity in m/s')
pylab.legend(loc='lower right')
pylab.grid()

import pylab
import random
import numpy as np


testdata = [] # start with an empty list
for i in range(1000): # repeat this loop 1000 times
# add a random number to testdata
  testdata.append(random.normalvariate(100,15))
  pylab.hist(testdata,bins=20)
#generates graph with random  values